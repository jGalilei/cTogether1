import {
  _objectWithoutPropertiesLoose
} from "./chunk-HTHQKSPX.js";
import {
  syntaxTree
} from "./chunk-EET4MZBK.js";
import {
  Decoration,
  EditorView,
  ViewPlugin,
  WidgetType
} from "./chunk-BK2XWACF.js";
import "./chunk-WGZ5GUV2.js";
import "./chunk-3EJPJMEH.js";

// node_modules/colors-named/lib/index.js
var names = [
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkgrey",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkslategrey",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dimgrey",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "green",
  "greenyellow",
  "grey",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightgrey",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightslategrey",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "slategrey",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen"
];
var lib_default = names;

// node_modules/colors-named-hex/lib/index.js
var hexs = [
  "#F0F8FF",
  "#FAEBD7",
  "#00FFFF",
  "#7FFFD4",
  "#F0FFFF",
  "#F5F5DC",
  "#FFE4C4",
  "#000000",
  "#FFEBCD",
  "#0000FF",
  "#8A2BE2",
  "#A52A2A",
  "#DEB887",
  "#5F9EA0",
  "#7FFF00",
  "#D2691E",
  "#FF7F50",
  "#6495ED",
  "#FFF8DC",
  "#DC143C",
  "#00FFFF",
  "#00008B",
  "#008B8B",
  "#B8860B",
  "#A9A9A9",
  "#006400",
  "#A9A9A9",
  "#BDB76B",
  "#8B008B",
  "#556B2F",
  "#FF8C00",
  "#9932CC",
  "#8B0000",
  "#E9967A",
  "#8FBC8F",
  "#483D8B",
  "#2F4F4F",
  "#2F4F4F",
  "#00CED1",
  "#9400D3",
  "#FF1493",
  "#00BFFF",
  "#696969",
  "#696969",
  "#1E90FF",
  "#B22222",
  "#FFFAF0",
  "#228B22",
  "#FF00FF",
  "#DCDCDC",
  "#F8F8FF",
  "#FFD700",
  "#DAA520",
  "#808080",
  "#008000",
  "#ADFF2F",
  "#808080",
  "#F0FFF0",
  "#FF69B4",
  "#CD5C5C",
  "#4B0082",
  "#FFFFF0",
  "#F0E68C",
  "#E6E6FA",
  "#FFF0F5",
  "#7CFC00",
  "#FFFACD",
  "#ADD8E6",
  "#F08080",
  "#E0FFFF",
  "#FAFAD2",
  "#D3D3D3",
  "#90EE90",
  "#D3D3D3",
  "#FFB6C1",
  "#FFA07A",
  "#20B2AA",
  "#87CEFA",
  "#778899",
  "#778899",
  "#B0C4DE",
  "#FFFFE0",
  "#00FF00",
  "#32CD32",
  "#FAF0E6",
  "#FF00FF",
  "#800000",
  "#66CDAA",
  "#0000CD",
  "#BA55D3",
  "#9370DB",
  "#3CB371",
  "#7B68EE",
  "#00FA9A",
  "#48D1CC",
  "#C71585",
  "#191970",
  "#F5FFFA",
  "#FFE4E1",
  "#FFE4B5",
  "#FFDEAD",
  "#000080",
  "#FDF5E6",
  "#808000",
  "#6B8E23",
  "#FFA500",
  "#FF4500",
  "#DA70D6",
  "#EEE8AA",
  "#98FB98",
  "#AFEEEE",
  "#DB7093",
  "#FFEFD5",
  "#FFDAB9",
  "#CD853F",
  "#FFC0CB",
  "#DDA0DD",
  "#B0E0E6",
  "#800080",
  "#663399",
  "#FF0000",
  "#BC8F8F",
  "#4169E1",
  "#8B4513",
  "#FA8072",
  "#F4A460",
  "#2E8B57",
  "#FFF5EE",
  "#A0522D",
  "#C0C0C0",
  "#87CEEB",
  "#6A5ACD",
  "#708090",
  "#708090",
  "#FFFAFA",
  "#00FF7F",
  "#4682B4",
  "#D2B48C",
  "#008080",
  "#D8BFD8",
  "#FF6347",
  "#40E0D0",
  "#EE82EE",
  "#F5DEB3",
  "#FFFFFF",
  "#F5F5F5",
  "#FFFF00",
  "#9ACD32"
];
var lib_default2 = hexs;

// node_modules/hsl-matcher/lib/index.js
var MATCHER = /hsla?\(\s*(\+?-?\d*\.?\d*(?:e\+)?(?:\d*)?(?:deg|rad|grad|turn)?)\s*,\s*(\+?\-?\d*\.?\d*(?:e\+)?(?:\d*)?%)\s*,\s*(\+?\-?\d*\.?\d*(?:e\+)?(?:\d*)?%)\s*(,\s*\+?\-?\s*(?:\d*\.?\d*(?:E-\d*)?%?)?)?\s*\)/i;
var MATCHER_SPACE = /hsla?\(\s*(\+?-?\d*\.?\d*(?:e\+)?(?:\d*)?(?:deg|rad|grad|turn)?)\s*(\+?\-?\d*\.?\d*(?:e\+)?(?:\d*)?%)\s*(\+?\-?\d*\.?\d*(?:e\+)?(?:\d*)?%)\s*(\/\s*\+?\-?\s*(?:\d*\.?\d*(?:E-\d*)?%?)?)?\s*\)/i;
var aStr = (a) => a ? a.replace(/^(,|\/)\s*/, "").trim() : a;
function hslMatcher(hsl = "") {
  const match = MATCHER.exec(hsl) || MATCHER_SPACE.exec(hsl);
  if (!!match) {
    const [_, h, s, l, a] = match;
    if (a && /^(:?(\/|,)\s*-?\+?)$/.test(a.trim()))
      return;
    return {
      h,
      s,
      l,
      a: aStr(a)
    };
  }
}
function hlsStringToRGB(hls) {
  const obj = hslMatcher(hls);
  if (!obj)
    return;
  const { h: hueStr, s: sStr, l: lStr, a: alphaStr } = obj;
  let h = 0, s = 0, l = 0;
  if (/\s*\d*turn\s*$/.test(hueStr)) {
    h = Number(hueStr.replace(/turn\s*$/i, "")) * 360;
  } else if (/\s*\d*grad\s*$/.test(hueStr)) {
    h = gradsToDegrees(hueStr.replace(/grad\s*$/i, ""));
  } else if (/\s*\d*rad\s*$/.test(hueStr)) {
    h = radiansToDegrees(Number(hueStr.replace(/rad\s*$/i, "")));
  }
  if (/^((-|\+)?\d*|(-|\+)?\d*?.\d*(e\+)?\d*?)$/.test(hueStr.replace(/deg$/i, ""))) {
    h = Number(hueStr.replace(/deg$/i, ""));
  }
  if (h > 360)
    h = 360;
  if (h < 0)
    h = 0;
  if (/^((-|\+)?\d*|(-|\+)?\d*?.\d*(e\+)?\d*?)%$/.test(sStr)) {
    s = Number(sStr.replace(/%$/, ""));
  }
  if (s > 100)
    s = 100;
  if (s < 0)
    s = 0;
  if (/^((-|\+)?\d*|(-|\+)?\d*?.\d*(e\+)?\d*?)%$/.test(lStr)) {
    l = Number(lStr.replace(/%$/, ""));
  }
  if (l > 100)
    l = 100;
  if (l < 0)
    l = 0;
  s /= 100;
  l /= 100;
  const k = (n) => (n + h / 30) % 12;
  const a = s * Math.min(l, 1 - l);
  const f = (n) => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
  const toFixed = (n) => Number(n.toFixed());
  if (alphaStr && /^\+?-?\d*(E-\d*|.\d*%?)?$/.test(alphaStr)) {
    const alpha = /%/g.test(alphaStr) ? Number(alphaStr.replace(/%/g, "")) / 100 : Number(alphaStr);
    return { r: toFixed(255 * f(0)), g: toFixed(255 * f(8)), b: toFixed(255 * f(4)), a: alpha };
  }
  return { r: toFixed(255 * f(0)), g: toFixed(255 * f(8)), b: toFixed(255 * f(4)) };
}
function gradsToDegrees(input) {
  let grads = Number(input);
  grads = grads % 400;
  if (grads < 0) {
    grads += 400;
  }
  let degrees = grads / 400 * 360;
  return degrees;
}
function radiansToDegrees(radians) {
  return Number((radians * (180 / Math.PI)).toFixed());
}

// node_modules/@uiw/codemirror-extensions-color/esm/utils.js
function toFullHex(color2) {
  if (color2.length === 4) {
    return ["#" + color2[1].repeat(2) + color2[2].repeat(2) + color2[3].repeat(2), ""];
  }
  if (color2.length === 5) {
    return ["#" + color2[1].repeat(2) + color2[2].repeat(2) + color2[3].repeat(2), color2[4].repeat(2)];
  }
  if (color2.length === 9) {
    return ["#" + color2.slice(1, -2), color2.slice(-2)];
  }
  return [color2, ""];
}
function rgbToHex(r, g, b) {
  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}
function hexToRgb(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
}
function RGBToHSL(r, g, b) {
  r /= 255, g /= 255, b /= 255;
  var max = Math.max(r, g, b), min = Math.min(r, g, b);
  var h = 0, s, l = (max + min) / 2;
  if (max == min) {
    h = s = 0;
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h: Math.floor(h * 360),
    s: Math.floor(s * 100),
    l: Math.floor(l * 100)
  };
}

// node_modules/@uiw/codemirror-extensions-color/esm/index.js
var _excluded = ["color", "colorRaw"];
var ColorType = function(ColorType2) {
  ColorType2["rgb"] = "RGB";
  ColorType2["hex"] = "HEX";
  ColorType2["named"] = "NAMED";
  ColorType2["hsl"] = "HSL";
  return ColorType2;
}({});
var colorState = /* @__PURE__ */ new WeakMap();
function colorDecorations(view) {
  var widgets = [];
  for (var range of view.visibleRanges) {
    syntaxTree(view.state).iterate({
      from: range.from,
      to: range.to,
      enter: (_ref) => {
        var {
          type,
          from,
          to
        } = _ref;
        var callExp = view.state.doc.sliceString(from, to);
        if (type.name === "CallExpression" && callExp.startsWith("rgb")) {
          var match = /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,?\s*(\d{1,3})\s*(,\s*\d*\.\d*\s*)?\)/i.exec(callExp) || /rgba?\(\s*(\d{1,3})\s*(\d{1,3})\s*(\d{1,3})\s*(\/?\s*\d+%)?(\/\s*\d+\.\d\s*)?\)/i.exec(callExp);
          if (!match)
            return;
          var [_, r, g, b, a] = match;
          var hex = rgbToHex(Number(r), Number(g), Number(b));
          var widget = Decoration.widget({
            widget: new ColorWidget({
              colorType: ColorType.rgb,
              color: hex,
              colorRaw: callExp,
              from,
              to,
              alpha: a ? a.replace(/(\/|,)/g, "") : ""
            }),
            side: 0
          });
          widgets.push(widget.range(from));
        } else if (type.name === "CallExpression" && hslMatcher(callExp)) {
          var _match = hlsStringToRGB(callExp);
          if (!_match)
            return;
          var {
            r: _r,
            g: _g,
            b: _b
          } = _match;
          var _hex = rgbToHex(Number(_r), Number(_g), Number(_b));
          var _widget = Decoration.widget({
            widget: new ColorWidget({
              colorType: ColorType.hsl,
              color: _hex,
              colorRaw: callExp,
              from,
              to,
              alpha: _match.a ? _match.a.toString() : ""
            }),
            side: 0
          });
          widgets.push(_widget.range(from));
        } else if (type.name === "ColorLiteral") {
          var [_color, alpha] = toFullHex(callExp);
          var _widget2 = Decoration.widget({
            widget: new ColorWidget({
              colorType: ColorType.hex,
              color: _color,
              colorRaw: callExp,
              from,
              to,
              alpha
            }),
            side: 0
          });
          widgets.push(_widget2.range(from));
        } else if (type.name === "ValueName") {
          var name = callExp;
          if (lib_default.includes(name)) {
            var _widget3 = Decoration.widget({
              widget: new ColorWidget({
                colorType: ColorType.named,
                color: lib_default2[lib_default.indexOf(name)],
                colorRaw: callExp,
                from,
                to,
                alpha: ""
              }),
              side: 0
            });
            widgets.push(_widget3.range(from));
          }
        }
      }
    });
  }
  return Decoration.set(widgets);
}
var ColorWidget = class extends WidgetType {
  constructor(_ref2) {
    var {
      color: color2,
      colorRaw
    } = _ref2, state = _objectWithoutPropertiesLoose(_ref2, _excluded);
    super();
    this.state = void 0;
    this.color = void 0;
    this.colorRaw = void 0;
    this.state = state;
    this.color = color2;
    this.colorRaw = colorRaw;
  }
  eq(other) {
    return other.state.colorType === this.state.colorType && other.color === this.color && other.state.from === this.state.from && other.state.to === this.state.to && other.state.alpha === this.state.alpha;
  }
  toDOM() {
    var picker = document.createElement("input");
    colorState.set(picker, this.state);
    picker.type = "color";
    picker.value = this.color;
    picker.dataset["color"] = this.color;
    picker.dataset["colorraw"] = this.colorRaw;
    var wrapper = document.createElement("span");
    wrapper.appendChild(picker);
    wrapper.dataset["color"] = this.color;
    wrapper.style.backgroundColor = this.colorRaw;
    return wrapper;
  }
  ignoreEvent() {
    return false;
  }
};
var colorView = function colorView2(showPicker) {
  if (showPicker === void 0) {
    showPicker = true;
  }
  return ViewPlugin.fromClass(class ColorView {
    constructor(view) {
      this.decorations = void 0;
      this.decorations = colorDecorations(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged) {
        this.decorations = colorDecorations(update.view);
      }
      var readOnly = update.view.contentDOM.ariaReadOnly === "true";
      var editable = update.view.contentDOM.contentEditable === "true";
      var canBeEdited = readOnly === false && editable;
      this.changePicker(update.view, canBeEdited);
    }
    changePicker(view, canBeEdited) {
      var doms = view.contentDOM.querySelectorAll("input[type=color]");
      doms.forEach((inp) => {
        if (!showPicker) {
          inp.setAttribute("disabled", "");
        } else {
          canBeEdited ? inp.removeAttribute("disabled") : inp.setAttribute("disabled", "");
        }
      });
    }
  }, {
    decorations: (v) => v.decorations,
    eventHandlers: {
      change: (e, view) => {
        var target = e.target;
        if (target.nodeName !== "INPUT" || !target.parentElement || !target.dataset.color && !target.dataset.colorraw)
          return false;
        var data = colorState.get(target);
        var value = target.value;
        var rgb = hexToRgb(value);
        var colorraw = target.dataset.colorraw;
        var slash = (target.dataset.colorraw || "").indexOf("/") > 4;
        var comma = (target.dataset.colorraw || "").indexOf(",") > 4;
        var converted = target.value;
        if (data.colorType === ColorType.rgb) {
          var funName = colorraw != null && colorraw.match(/^(rgba?)/) ? colorraw == null ? void 0 : colorraw.match(/^(rgba?)/)[0] : void 0;
          if (comma) {
            converted = rgb ? funName + "(" + rgb.r + ", " + rgb.g + ", " + rgb.b + (data.alpha ? ", " + data.alpha.trim() : "") + ")" : value;
          } else if (slash) {
            converted = rgb ? funName + "(" + rgb.r + " " + rgb.g + " " + rgb.b + (data.alpha ? " / " + data.alpha.trim() : "") + ")" : value;
          } else {
            converted = rgb ? funName + "(" + rgb.r + " " + rgb.g + " " + rgb.b + ")" : value;
          }
        } else if (data.colorType === ColorType.hsl) {
          var _rgb = hexToRgb(value);
          if (_rgb) {
            var {
              h,
              s,
              l
            } = RGBToHSL(_rgb == null ? void 0 : _rgb.r, _rgb == null ? void 0 : _rgb.g, _rgb == null ? void 0 : _rgb.b);
            converted = "hsl(" + h + "deg " + s + "% " + l + "%" + (data.alpha ? " / " + data.alpha : "") + ")";
          }
        }
        view.dispatch({
          changes: {
            from: data.from,
            to: data.to,
            insert: converted
          }
        });
        return true;
      }
    }
  });
};
var colorTheme = EditorView.baseTheme({
  "span[data-color]": {
    width: "12px",
    height: "12px",
    display: "inline-block",
    borderRadius: "2px",
    marginRight: "0.5ch",
    outline: "1px solid #00000040",
    overflow: "hidden",
    verticalAlign: "middle",
    marginTop: "-2px"
  },
  'span[data-color] input[type="color"]': {
    background: "transparent",
    display: "block",
    border: "none",
    outline: "0",
    paddingLeft: "24px",
    height: "12px"
  },
  'span[data-color] input[type="color"]::-webkit-color-swatch': {
    border: "none",
    paddingLeft: "24px"
  }
});
var color = [colorView(), colorTheme];
export {
  ColorType,
  color,
  colorTheme,
  colorView
};
//# sourceMappingURL=@uiw_codemirror-extensions-color.js.map
